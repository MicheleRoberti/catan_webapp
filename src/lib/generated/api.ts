/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface DiceDashboardDTO
 */
export interface DiceDashboardDTO {
  /**
   *
   * @type {{ [key: string]: number; }}
   * @memberof DiceDashboardDTO
   */
  diceCountMap?: { [key: string]: number };
}
/**
 *
 * @export
 * @interface EndTurnDTO
 */
export interface EndTurnDTO {
  /**
   *
   * @type {number}
   * @memberof EndTurnDTO
   */
  developCardDrawn?: number;
  /**
   *
   * @type {boolean}
   * @memberof EndTurnDTO
   */
  developCardPlayed?: boolean;
  /**
   *
   * @type {number}
   * @memberof EndTurnDTO
   */
  roadsBuilt?: number;
  /**
   *
   * @type {number}
   * @memberof EndTurnDTO
   */
  coloniesBuilt?: number;
  /**
   *
   * @type {number}
   * @memberof EndTurnDTO
   */
  citiesBuilt?: number;
}
/**
 *
 * @export
 * @interface GameDTO
 */
export interface GameDTO {
  /**
   *
   * @type {number}
   * @memberof GameDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GameDTO
   */
  startTimestamp?: string;
  /**
   *
   * @type {string}
   * @memberof GameDTO
   */
  endTimestamp?: string;
  /**
   *
   * @type {Array<PlayerScore>}
   * @memberof GameDTO
   */
  playerScores?: Array<PlayerScore>;
}
/**
 *
 * @export
 * @interface InitTurnDTO
 */
export interface InitTurnDTO {
  /**
   *
   * @type {number}
   * @memberof InitTurnDTO
   */
  gameId?: number;
  /**
   *
   * @type {number}
   * @memberof InitTurnDTO
   */
  playerId?: number;
  /**
   *
   * @type {number}
   * @memberof InitTurnDTO
   */
  outcome?: number;
}
/**
 *
 * @export
 * @interface PageGameDTO
 */
export interface PageGameDTO {
  /**
   *
   * @type {number}
   * @memberof PageGameDTO
   */
  totalElements?: number;
  /**
   *
   * @type {number}
   * @memberof PageGameDTO
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageGameDTO
   */
  size?: number;
  /**
   *
   * @type {Array<GameDTO>}
   * @memberof PageGameDTO
   */
  content?: Array<GameDTO>;
  /**
   *
   * @type {number}
   * @memberof PageGameDTO
   */
  number?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PageGameDTO
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {boolean}
   * @memberof PageGameDTO
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageGameDTO
   */
  last?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageGameDTO
   */
  numberOfElements?: number;
  /**
   *
   * @type {PageableObject}
   * @memberof PageGameDTO
   */
  pageable?: PageableObject;
  /**
   *
   * @type {boolean}
   * @memberof PageGameDTO
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface PagePlayerDTO
 */
export interface PagePlayerDTO {
  /**
   *
   * @type {number}
   * @memberof PagePlayerDTO
   */
  totalElements?: number;
  /**
   *
   * @type {number}
   * @memberof PagePlayerDTO
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PagePlayerDTO
   */
  size?: number;
  /**
   *
   * @type {Array<PlayerDTO>}
   * @memberof PagePlayerDTO
   */
  content?: Array<PlayerDTO>;
  /**
   *
   * @type {number}
   * @memberof PagePlayerDTO
   */
  number?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PagePlayerDTO
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {boolean}
   * @memberof PagePlayerDTO
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PagePlayerDTO
   */
  last?: boolean;
  /**
   *
   * @type {number}
   * @memberof PagePlayerDTO
   */
  numberOfElements?: number;
  /**
   *
   * @type {PageableObject}
   * @memberof PagePlayerDTO
   */
  pageable?: PageableObject;
  /**
   *
   * @type {boolean}
   * @memberof PagePlayerDTO
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
  /**
   *
   * @type {number}
   * @memberof PageableObject
   */
  offset?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PageableObject
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {boolean}
   * @memberof PageableObject
   */
  unpaged?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageableObject
   */
  paged?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageableObject
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageableObject
   */
  pageNumber?: number;
}
/**
 *
 * @export
 * @interface PlayerDTO
 */
export interface PlayerDTO {
  /**
   *
   * @type {number}
   * @memberof PlayerDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof PlayerDTO
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerDTO
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerDTO
   */
  avatarUrl?: string;
  /**
   *
   * @type {boolean}
   * @memberof PlayerDTO
   */
  deleted?: boolean;
}
/**
 *
 * @export
 * @interface PlayerScore
 */
export interface PlayerScore {
  /**
   *
   * @type {number}
   * @memberof PlayerScore
   */
  playerId?: number;
  /**
   *
   * @type {number}
   * @memberof PlayerScore
   */
  startOrder?: number;
  /**
   *
   * @type {boolean}
   * @memberof PlayerScore
   */
  longestRoad?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PlayerScore
   */
  largestArmy?: boolean;
  /**
   *
   * @type {number}
   * @memberof PlayerScore
   */
  score?: number;
  /**
   *
   * @type {number}
   * @memberof PlayerScore
   */
  victoryPoints?: number;
}
/**
 *
 * @export
 * @interface PlayerScoreDTO
 */
export interface PlayerScoreDTO {
  /**
   *
   * @type {number}
   * @memberof PlayerScoreDTO
   */
  playerId: number;
  /**
   *
   * @type {number}
   * @memberof PlayerScoreDTO
   */
  startOrder: number;
  /**
   *
   * @type {boolean}
   * @memberof PlayerScoreDTO
   */
  longestRoad?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PlayerScoreDTO
   */
  largestArmy?: boolean;
  /**
   *
   * @type {number}
   * @memberof PlayerScoreDTO
   */
  score?: number;
  /**
   *
   * @type {number}
   * @memberof PlayerScoreDTO
   */
  victoryPoints?: number;
}
/**
 *
 * @export
 * @interface SortObject
 */
export interface SortObject {
  /**
   *
   * @type {string}
   * @memberof SortObject
   */
  direction?: string;
  /**
   *
   * @type {string}
   * @memberof SortObject
   */
  nullHandling?: string;
  /**
   *
   * @type {boolean}
   * @memberof SortObject
   */
  ascending?: boolean;
  /**
   *
   * @type {string}
   * @memberof SortObject
   */
  property?: string;
  /**
   *
   * @type {boolean}
   * @memberof SortObject
   */
  ignoreCase?: boolean;
}

/**
 * GameControllerApi - axios parameter creator
 * @export
 */
export const GameControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {Array<PlayerScoreDTO>} playerScoreDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewGame: async (playerScoreDTO: Array<PlayerScoreDTO>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'playerScoreDTO' is not null or undefined
      assertParamExists('createNewGame', 'playerScoreDTO', playerScoreDTO);
      const localVarPath = `/game`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(playerScoreDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteGame', 'id', id);
      const localVarPath = `/game/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameRanking: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getGameRanking', 'id', id);
      const localVarPath = `/game/{id}/score`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search1: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/game`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Array<PlayerScoreDTO>} playerScoreDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScoreAndEndGame: async (
      id: number,
      playerScoreDTO: Array<PlayerScoreDTO>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateScoreAndEndGame', 'id', id);
      // verify required parameter 'playerScoreDTO' is not null or undefined
      assertParamExists('updateScoreAndEndGame', 'playerScoreDTO', playerScoreDTO);
      const localVarPath = `/game/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(playerScoreDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameControllerApi - functional programming interface
 * @export
 */
export const GameControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GameControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Array<PlayerScoreDTO>} playerScoreDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createNewGame(
      playerScoreDTO: Array<PlayerScoreDTO>,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createNewGame(playerScoreDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['GameControllerApi.createNewGame']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGame(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGame(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['GameControllerApi.deleteGame']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameRanking(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerScoreDTO>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameRanking(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['GameControllerApi.getGameRanking']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async search1(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageGameDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.search1(page, size, sort, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['GameControllerApi.search1']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {Array<PlayerScoreDTO>} playerScoreDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateScoreAndEndGame(
      id: number,
      playerScoreDTO: Array<PlayerScoreDTO>,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateScoreAndEndGame(id, playerScoreDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GameControllerApi.updateScoreAndEndGame']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GameControllerApi - factory interface
 * @export
 */
export const GameControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = GameControllerApiFp(configuration);
  return {
    /**
     *
     * @param {Array<PlayerScoreDTO>} playerScoreDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewGame(playerScoreDTO: Array<PlayerScoreDTO>, options?: RawAxiosRequestConfig): AxiosPromise<number> {
      return localVarFp.createNewGame(playerScoreDTO, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.deleteGame(id, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameRanking(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PlayerScoreDTO>> {
      return localVarFp.getGameRanking(id, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<PageGameDTO> {
      return localVarFp.search1(page, size, sort, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Array<PlayerScoreDTO>} playerScoreDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScoreAndEndGame(id: number, playerScoreDTO: Array<PlayerScoreDTO>, options?: RawAxiosRequestConfig): AxiosPromise<GameDTO> {
      return localVarFp.updateScoreAndEndGame(id, playerScoreDTO, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * GameControllerApi - object-oriented interface
 * @export
 * @class GameControllerApi
 * @extends {BaseAPI}
 */
export class GameControllerApi extends BaseAPI {
  /**
   *
   * @param {Array<PlayerScoreDTO>} playerScoreDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameControllerApi
   */
  public createNewGame(playerScoreDTO: Array<PlayerScoreDTO>, options?: RawAxiosRequestConfig) {
    return GameControllerApiFp(this.configuration)
      .createNewGame(playerScoreDTO, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameControllerApi
   */
  public deleteGame(id: number, options?: RawAxiosRequestConfig) {
    return GameControllerApiFp(this.configuration)
      .deleteGame(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameControllerApi
   */
  public getGameRanking(id: number, options?: RawAxiosRequestConfig) {
    return GameControllerApiFp(this.configuration)
      .getGameRanking(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameControllerApi
   */
  public search1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
    return GameControllerApiFp(this.configuration)
      .search1(page, size, sort, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Array<PlayerScoreDTO>} playerScoreDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameControllerApi
   */
  public updateScoreAndEndGame(id: number, playerScoreDTO: Array<PlayerScoreDTO>, options?: RawAxiosRequestConfig) {
    return GameControllerApiFp(this.configuration)
      .updateScoreAndEndGame(id, playerScoreDTO, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * PlayerControllerApi - axios parameter creator
 * @export
 */
export const PlayerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayer: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getPlayer', 'id', id);
      const localVarPath = `/player/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PlayerDTO} playerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newPlayer: async (playerDTO: PlayerDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'playerDTO' is not null or undefined
      assertParamExists('newPlayer', 'playerDTO', playerDTO);
      const localVarPath = `/player`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(playerDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [username]
     * @param {string} [email]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search: async (
      username?: string,
      email?: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/player`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (username !== undefined) {
        localVarQueryParameter['username'] = username;
      }

      if (email !== undefined) {
        localVarQueryParameter['email'] = email;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PlayerDTO} playerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePlayer: async (id: number, playerDTO: PlayerDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updatePlayer', 'id', id);
      // verify required parameter 'playerDTO' is not null or undefined
      assertParamExists('updatePlayer', 'playerDTO', playerDTO);
      const localVarPath = `/player/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(playerDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlayerControllerApi - functional programming interface
 * @export
 */
export const PlayerControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlayerControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPlayer(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayer(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['PlayerControllerApi.getPlayer']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {PlayerDTO} playerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async newPlayer(
      playerDTO: PlayerDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.newPlayer(playerDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['PlayerControllerApi.newPlayer']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [username]
     * @param {string} [email]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async search(
      username?: string,
      email?: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePlayerDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.search(username, email, page, size, sort, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['PlayerControllerApi.search']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {PlayerDTO} playerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePlayer(
      id: number,
      playerDTO: PlayerDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlayer(id, playerDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['PlayerControllerApi.updatePlayer']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PlayerControllerApi - factory interface
 * @export
 */
export const PlayerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PlayerControllerApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayer(id: number, options?: RawAxiosRequestConfig): AxiosPromise<PlayerDTO> {
      return localVarFp.getPlayer(id, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {PlayerDTO} playerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newPlayer(playerDTO: PlayerDTO, options?: RawAxiosRequestConfig): AxiosPromise<number> {
      return localVarFp.newPlayer(playerDTO, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} [username]
     * @param {string} [email]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(
      username?: string,
      email?: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PagePlayerDTO> {
      return localVarFp.search(username, email, page, size, sort, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PlayerDTO} playerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePlayer(id: number, playerDTO: PlayerDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.updatePlayer(id, playerDTO, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * PlayerControllerApi - object-oriented interface
 * @export
 * @class PlayerControllerApi
 * @extends {BaseAPI}
 */
export class PlayerControllerApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerControllerApi
   */
  public getPlayer(id: number, options?: RawAxiosRequestConfig) {
    return PlayerControllerApiFp(this.configuration)
      .getPlayer(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlayerDTO} playerDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerControllerApi
   */
  public newPlayer(playerDTO: PlayerDTO, options?: RawAxiosRequestConfig) {
    return PlayerControllerApiFp(this.configuration)
      .newPlayer(playerDTO, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [username]
   * @param {string} [email]
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerControllerApi
   */
  public search(username?: string, email?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
    return PlayerControllerApiFp(this.configuration)
      .search(username, email, page, size, sort, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PlayerDTO} playerDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerControllerApi
   */
  public updatePlayer(id: number, playerDTO: PlayerDTO, options?: RawAxiosRequestConfig) {
    return PlayerControllerApiFp(this.configuration)
      .updatePlayer(id, playerDTO, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * ServerStatusApi - axios parameter creator
 * @export
 */
export const ServerStatusApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    status: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/server-status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ServerStatusApi - functional programming interface
 * @export
 */
export const ServerStatusApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ServerStatusApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async status(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.status(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['ServerStatusApi.status']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ServerStatusApi - factory interface
 * @export
 */
export const ServerStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ServerStatusApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    status(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.status(options).then(request => request(axios, basePath));
    },
  };
};

/**
 * ServerStatusApi - object-oriented interface
 * @export
 * @class ServerStatusApi
 * @extends {BaseAPI}
 */
export class ServerStatusApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServerStatusApi
   */
  public status(options?: RawAxiosRequestConfig) {
    return ServerStatusApiFp(this.configuration)
      .status(options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * StatisticsControllerApi - axios parameter creator
 * @export
 */
export const StatisticsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameDiceDashboard: async (gameId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameId' is not null or undefined
      assertParamExists('getGameDiceDashboard', 'gameId', gameId);
      const localVarPath = `/statistics/game-dice-dashboard`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (gameId !== undefined) {
        localVarQueryParameter['gameId'] = gameId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} playerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayerOverallDiceDashboard: async (playerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'playerId' is not null or undefined
      assertParamExists('getPlayerOverallDiceDashboard', 'playerId', playerId);
      const localVarPath = `/statistics/player-dice-dashboard`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (playerId !== undefined) {
        localVarQueryParameter['playerId'] = playerId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StatisticsControllerApi - functional programming interface
 * @export
 */
export const StatisticsControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StatisticsControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameDiceDashboard(
      gameId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiceDashboardDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameDiceDashboard(gameId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['StatisticsControllerApi.getGameDiceDashboard']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} playerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPlayerOverallDiceDashboard(
      playerId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiceDashboardDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerOverallDiceDashboard(playerId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['StatisticsControllerApi.getPlayerOverallDiceDashboard']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * StatisticsControllerApi - factory interface
 * @export
 */
export const StatisticsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = StatisticsControllerApiFp(configuration);
  return {
    /**
     *
     * @param {number} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameDiceDashboard(gameId: number, options?: RawAxiosRequestConfig): AxiosPromise<DiceDashboardDTO> {
      return localVarFp.getGameDiceDashboard(gameId, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {number} playerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayerOverallDiceDashboard(playerId: number, options?: RawAxiosRequestConfig): AxiosPromise<DiceDashboardDTO> {
      return localVarFp.getPlayerOverallDiceDashboard(playerId, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * StatisticsControllerApi - object-oriented interface
 * @export
 * @class StatisticsControllerApi
 * @extends {BaseAPI}
 */
export class StatisticsControllerApi extends BaseAPI {
  /**
   *
   * @param {number} gameId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsControllerApi
   */
  public getGameDiceDashboard(gameId: number, options?: RawAxiosRequestConfig) {
    return StatisticsControllerApiFp(this.configuration)
      .getGameDiceDashboard(gameId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} playerId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsControllerApi
   */
  public getPlayerOverallDiceDashboard(playerId: number, options?: RawAxiosRequestConfig) {
    return StatisticsControllerApiFp(this.configuration)
      .getPlayerOverallDiceDashboard(playerId, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * TurnControllerApi - axios parameter creator
 * @export
 */
export const TurnControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {EndTurnDTO} endTurnDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endTurn: async (id: number, endTurnDTO: EndTurnDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('endTurn', 'id', id);
      // verify required parameter 'endTurnDTO' is not null or undefined
      assertParamExists('endTurn', 'endTurnDTO', endTurnDTO);
      const localVarPath = `/turn/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(endTurnDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {InitTurnDTO} initTurnDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newTurn: async (initTurnDTO: InitTurnDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'initTurnDTO' is not null or undefined
      assertParamExists('newTurn', 'initTurnDTO', initTurnDTO);
      const localVarPath = `/turn`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(initTurnDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TurnControllerApi - functional programming interface
 * @export
 */
export const TurnControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TurnControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {EndTurnDTO} endTurnDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async endTurn(
      id: number,
      endTurnDTO: EndTurnDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.endTurn(id, endTurnDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['TurnControllerApi.endTurn']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {InitTurnDTO} initTurnDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async newTurn(
      initTurnDTO: InitTurnDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.newTurn(initTurnDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['TurnControllerApi.newTurn']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TurnControllerApi - factory interface
 * @export
 */
export const TurnControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TurnControllerApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {EndTurnDTO} endTurnDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endTurn(id: number, endTurnDTO: EndTurnDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.endTurn(id, endTurnDTO, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {InitTurnDTO} initTurnDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newTurn(initTurnDTO: InitTurnDTO, options?: RawAxiosRequestConfig): AxiosPromise<number> {
      return localVarFp.newTurn(initTurnDTO, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * TurnControllerApi - object-oriented interface
 * @export
 * @class TurnControllerApi
 * @extends {BaseAPI}
 */
export class TurnControllerApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {EndTurnDTO} endTurnDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TurnControllerApi
   */
  public endTurn(id: number, endTurnDTO: EndTurnDTO, options?: RawAxiosRequestConfig) {
    return TurnControllerApiFp(this.configuration)
      .endTurn(id, endTurnDTO, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {InitTurnDTO} initTurnDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TurnControllerApi
   */
  public newTurn(initTurnDTO: InitTurnDTO, options?: RawAxiosRequestConfig) {
    return TurnControllerApiFp(this.configuration)
      .newTurn(initTurnDTO, options)
      .then(request => request(this.axios, this.basePath));
  }
}
